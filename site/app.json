[{"name":"app.R","content":"library(shiny)\nlibrary(reactable)\nlibrary(dplyr)\nlibrary(scales)\n\n# Read in dataset\nnew_df <- readRDS(gzcon(url(\"https://github.com/thefalkon-1/Prayer-Yards-Project/raw/main/data/data.rds\")))\n\ncreate_bar_plot <- function(value, width = 100, height = 20) {\n  # Check if the value is NA or non-numeric\n  if (is.na(value) || !is.numeric(value)) {\n    return(\"<svg width='100' height='20'><\/svg>\")  # Return an empty plot for NA or non-numeric values\n  }\n  \n  # Create a color gradient function\n  color_gradient <- scales::col_numeric(\n    palette = c(\"blue\", \"lightgrey\", \"red\"), \n    domain = c(0, 100)\n  )\n  \n  # Determine the color based on the value\n  color <- color_gradient(value)\n  \n  # Calculate the width of the bar based on the value\n  # Normal width is 100. Divided by 105 to make sure the bar is less than the space\n  bar_width <- (value / 110) * width\n  \n  # Adjust the radius for the circle and font size for the text\n  circle_radius <- height / 2.25  # Larger circle radius\n  text_font_size <- height / 2  # Smaller text font size\n  \n  # Circle should be anchored to the end of the bar plot\n  # so its center is at the end of the bar minus the radius\n  circle_center_x <- bar_width \n  \n  # Ensure the circle is fully visible when value is small\n  if (circle_center_x < circle_radius) {\n    circle_center_x <- circle_radius\n  }\n  \n  # Gray background bar dimensions\n  gray_bar_height <- height / 5\n  gray_bar_y_position <- (height - gray_bar_height) / 2\n  \n  # Create an inline SVG for the bar plot\n  svg_plot <- sprintf(\"<svg width='%f' height='%f' viewBox='0 0 %f %f'>\n                        <rect x='0' y='%f' width='%f' height='%f' fill='lightgrey'/>\n                        <rect x='0' y='0' width='%f' height='%f' fill='%s'/>\n                        <circle cx='%f' cy='%f' r='%f' fill='%s' stroke='white' stroke-width='1.25'/>\n                        <text x='%f' y='%f' font-size='%f' fill='white' font-weight=bold text-anchor='middle' alignment-baseline='middle'>%.0f<\/text>\n                      <\/svg>\", \n                      width, height, width, height, \n                      gray_bar_y_position, width, gray_bar_height,\n                      bar_width, height, color,\n                      circle_center_x, height / 2, circle_radius, color,\n                      circle_center_x, ((height / 2) + 3.5), text_font_size, value)\n  return(svg_plot)\n}\n\nui <- fluidPage(\n  tags$body(\n    # Note the wrapping of the string in HTML()\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed');\n      body {\n        font-family: 'Roboto Condensed';\n      }\"))\n  ),\n  titlePanel(\"NFL Air Yards Leaderboard\"),\n  fluidRow(\n    column(2, \n           sliderInput(\"weekInput\", \"Select Week:\", \n                       min = 1, max = 17, value = c(1, 17)),\n           numericInput(\"minAirYards\", \"Minimum Total Air Yards:\", \n                       min = 0, max = 2000, value = 100, step = 10),\n           checkboxGroupInput(\"positionToggle\", \"Position\",\n                              choices = c(\"WR\", \"TE\", \"RB\"),\n                              selected = c(\"WR\", \"TE\"))\n    ),\n    column(10,\n           div(style = \"padding: 10px 0px;\", \n               \"Prayer Yards are the amount of yards a ball traveled in the air (air yards) on passes deemed uncatchable.\"),\n           reactableOutput(\"table\"),\n           div(style = \"padding: 10px 0px;\", \n               \"Data: FTN Data via nflverse\")\n    ),\n  )\n)\n\nserver <- function(input, output) {\n  filtered_data <- reactive({\n    # Filter and summarize your data here\n    week_filtered_data <- new_df %>%\n      filter(position_receiver %in% input$positionToggle) %>%\n      filter(week >= input$weekInput[1], week <= input$weekInput[2])\n    \n    re_summed_data <- week_filtered_data %>%\n      group_by(full_name_receiver, receiver_player_id, posteam) %>%\n      summarise(\n        ay_catchable = sum(ifelse(is_catchable_ball == \"TRUE\", air_yards, 0), na.rm = TRUE),\n        ay_uncatchable = sum(ifelse(is_catchable_ball == \"FALSE\", air_yards, 0), na.rm = TRUE),\n        total = ay_catchable + ay_uncatchable\n      ) %>%\n      filter(total >= input$minAirYards) %>%\n      mutate(uncatchable_pct = case_when(ay_catchable < 0 & ay_uncatchable < 0 ~ 1,\n                                         ay_catchable < 0 & ay_uncatchable >= 0 ~ 1,\n                                         ay_catchable >= 0 & ay_uncatchable < 0 ~ 0,\n                                         .default = ay_uncatchable / total)) %>%\n      ungroup() %>%\n      select(-receiver_player_id) %>%\n      arrange(-total) %>%\n      filter(total > 0) %>%\n      mutate(percentile = (rank(-uncatchable_pct, ties.method = \"first\") / n() * 100))\n      \n    \n    re_summed_data\n  })\n  \n  output$table <- renderReactable({\n    reactable(filtered_data(), \n              # Specify columns and formatting here\n              columns = list(\n                full_name_receiver = colDef(name = \"Player\",\n                                            style = list(fontFamily = \"Roboto Condensed\"),\n                                            minWidth = 100,\n                                            maxWidth = 300),\n                posteam = colDef(name = \"Team\",\n                                 style = list(fontFamily = \"Roboto Condensed\"),\n                                 maxWidth = 50),\n                ay_catchable = colDef(name = \"Catchable Air Yards\",\n                                      style = list(fontFamily = \"Roboto Condensed\"),\n                                      maxWidth = 150),\n                ay_uncatchable = colDef(name = \"Prayer Yards\",\n                                        style = list(fontFamily = \"Roboto Condensed\"),\n                                        maxWidth = 150),\n                total = colDef(name = \"Total Air Yards\",\n                               style = list(fontFamily = \"Roboto Condensed\"),\n                               maxWidth = 150),\n                uncatchable_pct = colDef(name = \"Prayer Yards %\", \n                                         format = colFormat(percent = TRUE, digits = 1),\n                                         style = list(fontFamily = \"Roboto Condensed\"),\n                                         maxWidth = 150),\n                percentile = colDef(name = \"Percentile\",\n                                    style = list(fontFamily = \"sans-serif\",\n                                                 fontWeight = \"bold\"),\n                                    maxWidth = 125,\n                                    html = TRUE,  \n                                    cell = function(value) { \n                                      create_bar_plot(value) \n                                    })\n              ),\n              # Additional reactable options\n              pagination = TRUE,\n              defaultPageSize = 15,\n              showPageSizeOptions = TRUE,\n              pageSizeOptions = c(15, 25, 50, 100),\n              sortable = TRUE,\n              highlight = TRUE,\n              compact = TRUE,\n              striped = TRUE,\n              borderless = TRUE,\n              defaultSorted = c(\"total\"),\n              defaultSortOrder = \"desc\",\n              theme = reactableTheme(\n                borderColor = \"black\",\n                headerStyle = list(textAlign = \"right\",\n                                   fontSize = 12),\n                tableBodyStyle = list(textAlign = \"right\",\n                  fontSize = 14)\n              )\n    )\n  })\n}\n\nshinyApp(ui, server)","type":"text"}]
